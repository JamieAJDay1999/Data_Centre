import numpy as np
def calc_CIT(params):
    # Calculate the total heat capacity of IT equipment in the data center
    cit = params['n_racks'] * params['n_servers_per_rack'] * params['mass_server'] * params['c_server'] \
        + params['n_racks'] * params['mass_rack'] * params['c_rack']
    return cit

def calc_G_conv(params):
    g_gonv = params['n_racks'] * params['n_servers_per_rack'] * params['mass_server'] * params['g_conv_per_k']
    return g_gonv

def calc_free_space_in_rack(params):
    """
    Calculates the free air volume inside a rack by subtracting the total server volume from the rack volume.

    Args:
        params (dict): Dictionary containing rack and server dimensions and counts.

    Returns:
        float: Free air volume in a single rack (in m^3).
    """
    # Calculate server and rack volumes
    server_volume = params['server_height'] * params['server_width'] * params['server_depth']
    rack_volume = params['rack_height'] * params['rack_width'] * params['rack_depth']
    total_server_volume = params['n_servers_per_rack'] * server_volume
    free_space = rack_volume - total_server_volume
    return free_space


def calc_dc_wall_area(params):
    return \
        2 * params['dc_height'] * params['dc_length'] + \
        2 * params['dc_height'] * params['dc_width'] + \
        params['dc_length'] * params['dc_width']
def setup_simulation_parameters(mode="cool_down"):
    """
    Sets up simulation parameters and initial conditions based on the specified mode.

    Args:
        mode (str): "cool_down" or "warm_up".

    Returns:
        dict: A dictionary containing all simulation parameters.
    """
    params = {}
    params['simulation_mode'] = mode

    # Data Center Dimensions (in meters)
    params['dc_length'] = 28.0  # Length of the data center
    params['dc_width'] = 10.0   # Width of the data center
    params['dc_height'] = 3.0   # Height of the data center

    # IT Equipment Properties
    params['P_IT_heat_source'] = 300000  # Heat generated by IT equipment (Watts)
    params['n_racks'] = 100
    params['mass_server'] = 20  # Mass of each server in kg
    params['c_server'] = 600  # Specific heat capacity of the server in J/(kg*K)
    params['mass_rack'] = 140  # Mass of the rack in kg
    params['c_rack'] = 420  # Specific heat capacity of the rack in J/(kg*K)
    params['n_servers_per_rack'] = 10  # Number of servers per rack
    params['g_conv_per_k'] = 12000 / 2202 # Convective heat conductance of server to air (W/K/Kg)

    # Server and Rack Dimensions (in meters)
    params['server_height'] = 0.0868  # e.g., 1U server height
    params['server_width'] = 0.434
    params['server_depth'] = 0.679
    params['rack_height'] = 2.0
    params['rack_width'] = 0.605
    params['rack_depth'] = 1.2

    # Calculate free space in rack
    params['V_freeSpace_per_rack_in_formula'] = np.round(calc_free_space_in_rack(params),3)

    params['C_IT'] = calc_CIT(params)  # Total heat capacity of IT equipment (J/K)
    params['G_conv'] = np.round(calc_G_conv(params),3)  # Convective heat conductance IT to Rack Air (W/K)

    # Data Centre and Air Properties (General)
    params['rho_air'] = 1.16 #3
    params['c_p_air'] = 1005.45 #4
    params['C_Rack'] = params['V_freeSpace_per_rack_in_formula'] * params['n_racks'] * \
                       params['rho_air'] * params['c_p_air']

    # Cooling System Properties
    params['m_dot_air'] = 1 * params['n_racks'] #np.round((2.26 / 5) * params['n_racks'],3)
    params['kappa'] = 0.7663
    params['COP_HVAC'] = 3.7

    # HVAC Control Parameters
    params['P_HVAC_max_watts'] = 400000.0
    params['P_HVAC_min_watts'] = 0.0
    params['P_HVAC_ramp'] = 10000.0

    # Cold Aisle Air Properties
    params['V_cAisle'] = 2000
    params['C_cAisle'] = params['V_cAisle'] * params['rho_air'] * params['c_p_air']

    # Hot Aisle Air Properties
    params['V_hAisle'] = 96
    params['C_hAisle'] = params['V_hAisle'] * params['rho_air'] * params['c_p_air']

    # Cold Aisle Wall Properties
    params['alpha_cAisle'] = 16
    params['A_cAisle'] = calc_dc_wall_area(params)
    params['R_cold_K_per_W'] = np.round((0.7 / 1000) / (params['A_cAisle'] / 38), 4)  # Thermal resistance of cold aisle wall (K/W)
    term1_Gcold_inv = 1 / (params['alpha_cAisle'] * params['A_cAisle']) \
        if (params['alpha_cAisle'] * params['A_cAisle']) > 0 else float('inf')
    params['G_cold'] = 1 / (term1_Gcold_inv + params['R_cold_K_per_W']) \
        if (term1_Gcold_inv + params['R_cold_K_per_W']) > 0 else params['alpha_cAisle'] * params['A_cAisle']
    params['C_cWall'] = 840e3
    params['T_out_Kelvin'] = 295.15
    params['T_out_Celsius'] = params['T_out_Kelvin'] - 273.15

    # TES Tank Properties
    params['TES_kwh_cap'] = 300
    params['TES_w_discharge_max'] = 300000
    params['TES_w_discharge_min'] = 0.0
    params['TES_discharge_efficiency'] = 0.9
    params['TES_w_charge_max'] = 300000
    params['TES_w_charge_min'] = 0.0
    params['TES_charge_efficiency'] = 0.9
    params['TES_initial_charge_kWh'] = 0.5 * params['TES_kwh_cap']
    params['E_TES_min_kWh'] = 0.0
    params['TES_p_dis_ramp'] = 10000
    params['TES_p_ch_ramp'] = 10000
    

    # Simulation Parameters
    params['dt'] = 0.1
    params['simulation_time_minutes'] = 120 # Default simulation time
    params['begin_change'] = 20

    if mode == "cool_down":
        params['T_Air_in_initial'] = 18.0
        params['T_cAisle_initial'] = 18.63
        params['T_cWall_initial_Celsius'] = params['T_out_Celsius'] + 2.0
        params['T_Rack_initial_Celsius'] = 35
        params['T_IT_initial_Celsius'] = 50
        params['T_hAisle_initial'] = 35

        params['T_target_Air_in_Celsius'] = 18  # Target HVAC supply air temperature (°C)
        params['T_cAisle_upper_limit_Celsius'] = None # Not used in cool_down mode
        # This flag indicates if HVAC is active during the warm-up phase (becomes True when limit is hit)
        params['warm_up'] = True # Not relevant for cool_down but define for consistency

    elif mode == "warm_up":
        params['T_Air_in_initial'] = 18.0
        params['T_cAisle_initial'] = 18.63
        params['T_cWall_initial_Celsius'] = params['T_out_Celsius'] + 2.0
        params['T_Rack_initial_Celsius'] = 35
        params['T_IT_initial_Celsius'] = 50
        params['T_hAisle_initial'] = 35
        params['T_target_Air_in_Celsius'] = 18.0  # Ultimate target HVAC supply air temperature (°C)
        params['T_cAisle_upper_limit_Celsius'] = 32.0 # Upper limit for T_cAisle to trigger HVAC
        params['warm_up'] = "Before" # HVAC starts off, becomes True when T_cAisle hits limit
    else:
        raise ValueError("Invalid mode specified. Choose 'cool_down' or 'warm_up'.")

    return params

setup_simulation_parameters("cool_down")