import numpy as np
import matplotlib.pyplot as plt

# --- Function to Set Up Simulation Parameters and Initial Conditions ---
def setup_simulation_parameters(mode="cool_down"):
    """
    Sets up simulation parameters and initial conditions based on the specified mode.

    Args:
        mode (str): "cool_down" or "warm_up".

    Returns:
        dict: A dictionary containing all simulation parameters.
    """
    params = {}
    params['simulation_mode'] = mode

    # IT Equipment Properties
    params['P_IT_heat_source'] = 10000  # Heat generated by IT equipment (Watts)
    params['C_IT'] = 1.321e6      # Heat capacity of IT components (J/K) 1
    params['G_conv'] = 12000      # Convective heat conductance IT to Rack Air (W/K) 2

    # Data Centre and Air Properties (General)
    params['rho_air'] = 1.16 #3
    params['c_p_air'] = 1005.45 #4

    # Rack Air Properties
    params['V_freeSpace_per_rack_in_formula'] = 0.25
    params['n_racks'] = 5
    params['C_Rack'] = params['V_freeSpace_per_rack_in_formula'] * params['n_racks'] * \
                       params['rho_air'] * params['c_p_air']

    # Cooling System Properties
    params['m_dot_air'] = 2.26
    params['kappa'] = 0.7663
    params['COP_HVAC'] = 3.7

    # HVAC Control Parameters
    params['P_HVAC_max_watts'] = 10000.0
    params['P_HVAC_min_watts'] = 0.0

    # Cold Aisle Air Properties
    params['V_cAisle'] = 10
    params['C_cAisle'] = params['V_cAisle'] * params['rho_air'] * params['c_p_air']

    # Hot Aisle Air Properties
    params['V_hAisle'] = 10
    params['C_hAisle'] = params['V_hAisle'] * params['rho_air'] * params['c_p_air']

    # Cold Aisle Wall Properties
    params['alpha_cAisle'] = 16
    params['A_cAisle'] = 38
    params['R_cold_K_per_W'] = (0.7 / 1000)
    term1_Gcold_inv = 1 / (params['alpha_cAisle'] * params['A_cAisle']) \
        if (params['alpha_cAisle'] * params['A_cAisle']) > 0 else float('inf')
    params['G_cold'] = 1 / (term1_Gcold_inv + params['R_cold_K_per_W']) \
        if (term1_Gcold_inv + params['R_cold_K_per_W']) > 0 else params['alpha_cAisle'] * params['A_cAisle']
    params['C_cWall'] = 840e3
    params['T_out_Kelvin'] = 295.15
    params['T_out_Celsius'] = params['T_out_Kelvin'] - 273.15

    # Simulation Parameters
    params['dt'] = 0.01
    params['simulation_time_minutes'] = 60 # Default simulation time

    if mode == "cool_down":
        params['T_target_Air_in_Celsius'] = 18.0  # Target HVAC supply air temperature (°C)
        params['T_IT_initial_Celsius'] = 45.0
        params['T_Rack_initial_Celsius'] = 35.0
        params['T_cWall_initial_Celsius'] = params['T_out_Celsius'] + 2.0
        params['T_cAisle_upper_limit_Celsius'] = None # Not used in cool_down mode
        params['initial_P_HVAC_is_auto'] = True # True means calculate initial P_HVAC based on target
        # This flag indicates if HVAC is active during the warm-up phase (becomes True when limit is hit)
        params['hvac_active_during_warmup'] = False # Not relevant for cool_down but define for consistency

    elif mode == "warm_up":
        params['T_target_Air_in_Celsius'] = 18.0  # Ultimate target HVAC supply air temperature (°C)
        params['T_cAisle_upper_limit_Celsius'] = 27.0 # Upper limit for T_cAisle to trigger HVAC
        
        # Start with a cooler data center
        params['T_IT_initial_Celsius'] = 20.0
        params['T_Rack_initial_Celsius'] = 19.0
        # Start wall near initial air conditions or outside temp
        params['T_cWall_initial_Celsius'] = params['T_out_Celsius'] + 0.5 
        params['initial_P_HVAC_is_auto'] = False # False means HVAC starts off (P_HVAC_min_watts)
        params['hvac_active_during_warmup'] = False # HVAC starts off, becomes True when T_cAisle hits limit
        params['simulation_time_minutes'] = 120 # Longer simulation for warm-up to see full cycle
    else:
        raise ValueError("Invalid mode specified. Choose 'cool_down' or 'warm_up'.")

    return params

# --- CHOOSE SIMULATION MODE ---
#current_simulation_mode = "cool_down"
current_simulation_mode = "warm_up"

# --- Load Parameters ---
p = setup_simulation_parameters(mode=current_simulation_mode)

# --- Calculations based on parameters ---
simulation_time_seconds = p['simulation_time_minutes'] * 60
num_time_points = int(simulation_time_seconds / p['dt'])
time_points = np.linspace(0, simulation_time_seconds, num_time_points)

# --- Initialize Simulation Arrays ---
T_IT_sim = np.zeros(num_time_points)
T_Rack_sim = np.zeros(num_time_points)
T_cAisle_sim = np.zeros(num_time_points)
T_cWall_sim = np.zeros(num_time_points)
T_hAisle_sim = np.zeros(num_time_points)
T_Air_in_sim = np.zeros(num_time_points)
P_HVAC_sim = np.zeros(num_time_points)

# --- Set Initial Conditions ---
T_IT_sim[0] = p['T_IT_initial_Celsius']
T_Rack_sim[0] = p['T_Rack_initial_Celsius']
T_cWall_sim[0] = p['T_cWall_initial_Celsius']
T_hAisle_sim[0] = T_Rack_sim[0] # Initial hot aisle air temperature assumed same as rack outlet

# Initial HVAC power and T_Air_in
if p['initial_P_HVAC_is_auto']: # Typically for cool_down mode
    P_HVAC_required_initial = (T_hAisle_sim[0] - p['T_target_Air_in_Celsius']) * \
                              (p['m_dot_air'] * p['c_p_air']) / p['COP_HVAC']
    P_HVAC_sim[0] = np.clip(P_HVAC_required_initial, p['P_HVAC_min_watts'], p['P_HVAC_max_watts'])
    
    T_Air_in_sim[0] = T_hAisle_sim[0] - (P_HVAC_sim[0] * p['COP_HVAC']) / \
                      (p['m_dot_air'] * p['c_p_air'])
    
    # If HVAC power was not limited and could achieve the target, set T_Air_in precisely
    if p['P_HVAC_min_watts'] < P_HVAC_required_initial < p['P_HVAC_max_watts']:
        T_Air_in_sim[0] = p['T_target_Air_in_Celsius']
else: # HVAC starts off (e.g., for warm_up mode)
    P_HVAC_sim[0] = p['P_HVAC_min_watts']
    T_Air_in_sim[0] = T_hAisle_sim[0] # If P_HVAC is 0, Q_cool is 0, so T_Air_in = T_hAisle

T_cAisle_sim[0] = T_Air_in_sim[0] # Start cold aisle at the initial supply temperature

# --- Main Simulation Loop ---
for i in range(1, num_time_points):
    T_IT_prev = T_IT_sim[i-1]
    T_Rack_prev = T_Rack_sim[i-1]
    T_cAisle_prev = T_cAisle_sim[i-1]
    T_cWall_prev = T_cWall_sim[i-1]
    T_hAisle_prev = T_hAisle_sim[i-1]

    # --- Dynamic HVAC Power Control ---
    P_HVAC_required_current_step = 0.0 # Initialize
    
    if p['simulation_mode'] == "warm_up" and not p['hvac_active_during_warmup']:
        if T_cAisle_prev < p['T_cAisle_upper_limit_Celsius']:
            # Warm-up phase: HVAC is off
            current_P_HVAC = p['P_HVAC_min_watts']
            # P_HVAC_required_current_step is effectively min_watts, so refinement to target won't apply
            P_HVAC_required_current_step = p['P_HVAC_min_watts'] 
        else:
            # Warm-up phase: T_cAisle hits limit, activate HVAC
            p['hvac_active_during_warmup'] = True 
            # Now calculate P_HVAC based on the ultimate target
            P_HVAC_required_current_step = (T_hAisle_prev - p['T_target_Air_in_Celsius']) * \
                                           (p['m_dot_air'] * p['c_p_air']) / p['COP_HVAC']
            current_P_HVAC = np.clip(P_HVAC_required_current_step, p['P_HVAC_min_watts'], p['P_HVAC_max_watts'])
    else: # cool_down mode, OR warm_up mode with HVAC already active
        P_HVAC_required_current_step = (T_hAisle_prev - p['T_target_Air_in_Celsius']) * \
                                       (p['m_dot_air'] * p['c_p_air']) / p['COP_HVAC']
        current_P_HVAC = np.clip(P_HVAC_required_current_step, p['P_HVAC_min_watts'], p['P_HVAC_max_watts'])
    
    P_HVAC_sim[i] = current_P_HVAC
    
    # Calculate current inlet air temperature based on HVAC power
    calculated_T_Air_in = T_hAisle_prev - (current_P_HVAC * p['COP_HVAC']) / \
                          (p['m_dot_air'] * p['c_p_air'])
    
    # Refine T_Air_in if target is perfectly met and HVAC is actively cooling to target
    T_Air_in_sim[i] = calculated_T_Air_in # Default to calculated
    
    apply_target_refinement = False
    if p['simulation_mode'] == "cool_down":
        if p['P_HVAC_min_watts'] < P_HVAC_required_current_step < p['P_HVAC_max_watts']:
            apply_target_refinement = True
    elif p['simulation_mode'] == "warm_up":
        if p['hvac_active_during_warmup']: # Only if HVAC is supposed to be active
            if p['P_HVAC_min_watts'] < P_HVAC_required_current_step < p['P_HVAC_max_watts']:
                apply_target_refinement = True
                
    if apply_target_refinement:
        T_Air_in_sim[i] = p['T_target_Air_in_Celsius']

    current_T_Air_in = T_Air_in_sim[i] 
    
    # Optional: Print status less frequently
    # Print roughly every minute of simulation time (e.g. 60 seconds / dt)
    print_interval = int(60 / p['dt']) if p['dt'] > 0 else num_time_points 
    if i % print_interval == 0 or i == num_time_points -1 : 
        print(f"Time: {time_points[i]/60:.1f} min, T_IT: {T_IT_prev:.2f}, T_Rack: {T_Rack_prev:.2f}, "
              f"T_cAisle: {T_cAisle_prev:.2f}, T_hAisle: {T_hAisle_prev:.2f}, "
              f"T_Air_in: {current_T_Air_in:.2f}, P_HVAC: {current_P_HVAC:.0f}W, "
              f"WarmUpActive: {p.get('hvac_active_during_warmup', 'N/A')}")

    # Differential Equations
    dT_IT_dt = (p['P_IT_heat_source'] - p['G_conv'] * (T_IT_prev - T_Rack_prev)) / p['C_IT']
    dT_Rack_dt = (p['m_dot_air'] * p['kappa'] * p['c_p_air'] * (T_cAisle_prev - T_Rack_prev) +
                  p['G_conv'] * (T_IT_prev - T_Rack_prev)) / p['C_Rack']
    dT_cAisle_dt = (p['m_dot_air'] * p['kappa'] * p['c_p_air'] * (current_T_Air_in - T_cAisle_prev) -
                    p['G_cold'] * (T_cAisle_prev - T_cWall_prev)) / p['C_cAisle']
    dT_cWall_dt = (((p['T_out_Celsius'] - T_cWall_prev) / p['R_cold_K_per_W']) +
                   p['G_cold'] * (T_cAisle_prev - T_cWall_prev)) / p['C_cWall']
    
    if p['C_hAisle'] > 0:
        dT_hAisle_dt = (p['m_dot_air'] * p['kappa'] * p['c_p_air'] * (T_Rack_prev - T_hAisle_prev)) / p['C_hAisle']
    else:
        dT_hAisle_dt = 0

    # Update temperatures for the next step
    T_IT_sim[i] = T_IT_prev + dT_IT_dt * p['dt']
    T_Rack_sim[i] = T_Rack_prev + dT_Rack_dt * p['dt']
    T_cAisle_sim[i] = T_cAisle_prev + dT_cAisle_dt * p['dt']
    T_cWall_sim[i] = T_cWall_prev + dT_cWall_dt * p['dt']
    T_hAisle_sim[i] = T_hAisle_prev + dT_hAisle_dt * p['dt']

# --- Plotting ---
plt.figure(figsize=(14, 12))
time_minutes_plotting = time_points / 60

# Subplot 1: IT, Rack, Cold Aisle, Inlet Air Temperatures
plt.subplot(3, 1, 1)
plt.plot(time_minutes_plotting, T_IT_sim, label='IT Equipment ($T_{IT}$) (°C)')
plt.plot(time_minutes_plotting, T_Rack_sim, label='Rack Air Outlet ($T_{Rack}$) (°C)')
plt.plot(time_minutes_plotting, T_cAisle_sim, label='Cold Aisle Air ($T_{cAisle}$) (°C)', linestyle=':')
plt.plot(time_minutes_plotting, T_Air_in_sim, label='HVAC Supply Air ($T_{Air,in}$) (°C)', linestyle='--')
plt.axhline(p['T_target_Air_in_Celsius'], color='g', linestyle=':', linewidth=0.8, label=f'Target $T_{{Air,in}}$ ({p["T_target_Air_in_Celsius"]}°C)')
if p['simulation_mode'] == "warm_up" and p.get('T_cAisle_upper_limit_Celsius') is not None:
    plt.axhline(p['T_cAisle_upper_limit_Celsius'], color='red', linestyle='--', linewidth=1.0, 
                label=f'Warm-up Limit $T_{{cAisle}}$ ({p["T_cAisle_upper_limit_Celsius"]}°C)')
plt.xlabel('Time (minutes)')
plt.ylabel('Temperature (°C)')
plt.title(f'Data Centre Cooling Simulation ({p["simulation_mode"].replace("_", " ").title()} Mode)')
plt.legend()
plt.grid(True)

# Dynamic Y-axis for Subplot 1
min_temps_plot1 = [p['T_target_Air_in_Celsius'] - 5]
if num_time_points > 0:
    min_temps_plot1.extend([np.min(T_IT_sim)-2, np.min(T_Rack_sim)-2, np.min(T_cAisle_sim)-2, np.min(T_Air_in_sim)-2])
min_y_plot1 = min(min_temps_plot1)

max_temps_plot1 = [p['T_target_Air_in_Celsius'] + 10]
if num_time_points > 0:
    max_temps_plot1.extend([np.max(T_IT_sim)+5, np.max(T_Rack_sim)+5, np.max(T_cAisle_sim)+5, np.max(T_Air_in_sim)+5])
if p['simulation_mode'] == "warm_up" and p.get('T_cAisle_upper_limit_Celsius') is not None:
    max_temps_plot1.append(p['T_cAisle_upper_limit_Celsius'] + 5)
max_y_plot1 = max(max_temps_plot1)
plt.ylim(bottom=min_y_plot1, top=max_y_plot1)


# Subplot 2: Wall and Outside Temperatures
plt.subplot(3, 1, 2)
plt.plot(time_minutes_plotting, T_cWall_sim, label='Cold Aisle Wall ($T_{cWall}$) (°C)')
plt.plot(time_minutes_plotting, np.full(num_time_points, p['T_out_Celsius']), label=f'Outside Temperature ($T_{{out}}$) ({p["T_out_Celsius"]:.1f}°C)', linestyle='-.')
plt.xlabel('Time (minutes)')
plt.ylabel('Temperature (°C)')
plt.legend()
plt.grid(True)
min_y_plot2 = p['T_out_Celsius'] - 5
if num_time_points > 0 and T_cWall_sim.size > 0 :
    min_y_plot2 = min(min_y_plot2, np.min(T_cWall_sim) - 5)
max_y_plot2 = p['T_out_Celsius'] + 10
if num_time_points > 0 and T_cWall_sim.size > 0:
    max_y_plot2 = max(max_y_plot2, np.max(T_cWall_sim) + 5)
plt.ylim(bottom=min_y_plot2, top=max_y_plot2)


# Subplot 3: HVAC Power and Resulting Inlet Air Temperature
ax1 = plt.subplot(3, 1, 3)
line1 = ax1.plot(time_minutes_plotting, P_HVAC_sim, label='HVAC Power ($P_{HVAC}$) (Watts)', color='purple')
ax1.set_xlabel('Time (minutes)')
ax1.set_ylabel('HVAC Power (Watts)', color='purple')
ax1.tick_params(axis='y', labelcolor='purple')
ax1.grid(True)
ax1.set_ylim(bottom=-0.05 * p['P_HVAC_max_watts'], top=p['P_HVAC_max_watts'] * 1.1 if p['P_HVAC_max_watts'] > 0 else 100) # Handle P_HVAC_max_watts = 0

ax2 = ax1.twinx()
line2 = ax2.plot(time_minutes_plotting, T_Air_in_sim, label='HVAC Supply Air ($T_{Air,in}$) (°C)', linestyle='--', color='orange')
target_line_ax2 = ax2.axhline(p['T_target_Air_in_Celsius'], color='g', linestyle=':', linewidth=0.8, label=f'Target $T_{{Air,in}}$ ({p["T_target_Air_in_Celsius"]}°C)')
ax2.set_ylabel('Supply Air Temperature (°C)', color='orange')
ax2.tick_params(axis='y', labelcolor='orange')

min_T_air_in_plot_val = p['T_target_Air_in_Celsius'] - 5
if num_time_points > 0 and T_Air_in_sim.size > 0:
    min_T_air_in_plot_val = min(min_T_air_in_plot_val, np.min(T_Air_in_sim)-2)
max_T_air_in_plot_val = p['T_target_Air_in_Celsius'] + 10
if num_time_points > 0 and T_Air_in_sim.size > 0:
    max_T_air_in_plot_val = max(max_T_air_in_plot_val, np.max(T_Air_in_sim)+2)
if p['simulation_mode'] == "warm_up" and num_time_points > 0 and T_hAisle_sim.size > 0: 
     max_T_air_in_plot_val = max(max_T_air_in_plot_val, T_hAisle_sim[0]+2) 
ax2.set_ylim(bottom=min_T_air_in_plot_val, top=max_T_air_in_plot_val)

# Combine legends from both axes for Subplot 3
handles_ax1, labels_ax1 = ax1.get_legend_handles_labels()
handles_ax2, labels_ax2 = ax2.get_legend_handles_labels()

# Use a dictionary to ensure unique labels for the combined legend
unique_legends = {label: handle for handle, label in zip(handles_ax1 + handles_ax2, labels_ax1 + labels_ax2)}
ax1.legend(unique_legends.values(), unique_legends.keys(), loc='best')

ax1.set_title('Dynamic HVAC Power and Resulting Supply Air Temperature')

plt.tight_layout()
plt.show()